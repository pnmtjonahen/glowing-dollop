package com.hack.a.drone.ui;

import com.hack.a.drone.CX10;
import com.hack.a.drone.io.controls.Keyboard;
import com.hack.a.drone.io.controls.XInput;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

/**
 *
 * @author Philippe Tjon - A - Hen philippe@tjonahen.nl
 */
public class MyMainWindow extends javax.swing.JFrame implements ActionListener {

    private final CX10 cx10;
    private boolean isConnected = false;
    private boolean isRecording = false;
    private boolean isPlaying = false;
    private boolean isControlled = false;
    private Keyboard keyboard;

    /**
     * Creates new form MyMainWindow
     */
    public MyMainWindow() {
        initComponents();
        this.cx10 = new CX10();
        btnConnect.setEnabled(true);
        btnControls.setEnabled(false);
        btnVideo.setEnabled(false);
        btnRecord.setEnabled(false);
    }
    
    public void showWindow() {
        btnConnect.addActionListener(this);
        btnControls.addActionListener(this);
        btnVideo.addActionListener(this);
        btnRecord.addActionListener(this);

        pack();
        setTitle("CX-10WD Cockpit");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        platformSelect = new javax.swing.ButtonGroup();
        inputSelect = new javax.swing.ButtonGroup();
        btnConnect = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        btnVideo = new javax.swing.JButton();
        btnRecord = new javax.swing.JButton();
        btnControls = new javax.swing.JButton();
        radioKeyboard = new javax.swing.JRadioButton();
        radioController = new javax.swing.JRadioButton();
        radioWindows = new javax.swing.JRadioButton();
        radioLinux = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnConnect.setText("Connect");

        lblStatus.setText("No Error");

        btnVideo.setText("Start Video");

        btnRecord.setText("Record Video");

        btnControls.setText("Start Controller");

        inputSelect.add(radioKeyboard);
        radioKeyboard.setSelected(true);
        radioKeyboard.setText("Keyboard");

        inputSelect.add(radioController);
        radioController.setText("Controller");

        platformSelect.add(radioWindows);
        radioWindows.setText("Windows");

        platformSelect.add(radioLinux);
        radioLinux.setSelected(true);
        radioLinux.setText("Linux");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(lblStatus))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnConnect)
                        .addGap(18, 18, 18)
                        .addComponent(btnVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioWindows)
                            .addComponent(radioLinux))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioKeyboard)
                            .addComponent(btnControls)
                            .addComponent(radioController))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioKeyboard)
                    .addComponent(radioWindows))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioController)
                    .addComponent(radioLinux))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnect)
                    .addComponent(btnVideo)
                    .addComponent(btnRecord)
                    .addComponent(btnControls))
                .addGap(18, 18, 18)
                .addComponent(lblStatus)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void actionPerformed(final ActionEvent e) {
        new Thread(new Runnable() {
            public void run() {
                if (e.getSource() == btnConnect) {
                    onConnectClicked();
                }
                if (e.getSource() == btnVideo) {
                    onStartVideoStreamClicked();
                }
                if (e.getSource() == btnRecord) {
                    onRecordClicked();
                }
                if (e.getSource() == btnControls) {
                    onControlsClicked();
                }
            }
        }).start();
    }

    private void onConnectClicked() {
        MainWindowModel model;
        if (!isConnected) {
            try {
                model = getModel();
                model.setBtnConnectEnabled(false);
                model.setBtnConnectText("Connecting...");

                setModel(model);

                cx10.connect();
                isConnected = true;

                model = getModel();
                model.setBtnConnectEnabled(true);
                model.setBtnConnectText("Disconnect");
                model.setBtnRecordEnabled(true);
                model.setBtnVideoEnabled(true);
                model.setBtnRecordEnabled(true);
                model.setBtnControlsEnabled(true);

                setModel(model);
            } catch (IOException e) {
                e.printStackTrace();

                model = getModel();
                model.setLblStatusText(e.getMessage());
                model.setBtnConnectEnabled(true);
                model.setBtnConnectText("Connect");
                setModel(model);
            }
        } else {
            cx10.disconnect();
            isConnected = false;

            model = getModel();
            model.setBtnConnectEnabled(true);
            model.setBtnConnectText("Connect");
            model.setBtnRecordEnabled(false);
            model.setBtnVideoEnabled(false);
            model.setBtnRecordEnabled(false);
            model.setBtnControlsEnabled(false);

            setModel(model);
        }

    }
    private void onStartVideoStreamClicked() {
        MainWindowModel model;
        if (!isPlaying) {
            try {
                model = getModel();
                model.setBtnVideoText("Init Video...");
                model.setBtnVideoEnabled(false);
                setModel(model);

                cx10.startVideoStream((radioWindows.isSelected())?"win":"lin");
                isPlaying = true;

                model = getModel();
                model.setBtnVideoText("Stop Video");
                model.setBtnVideoEnabled(true);
                setModel(model);
            } catch (IOException e) {
                e.printStackTrace();
                model = getModel();
                model.setLblStatusText(e.getMessage());
                model.setBtnVideoEnabled(true);
                model.setBtnVideoText("Start Video");
                setModel(model);
            }
        } else {
            cx10.stopVideoStream();
            isPlaying = false;

            model = getModel();
            model.setBtnVideoText("Start Video");

            setModel(model);
        }
    }

    private void onRecordClicked() {
        MainWindowModel model;
        if (!isRecording) {
            try {
                model = getModel();
                model.setBtnRecordText("Init Recording...");
                model.setBtnRecordEnabled(false);
                setModel(model);

                cx10.startVideoRecorder();
                isRecording = true;

                model = getModel();
                model.setBtnRecordText("Stop Recording");
                model.setBtnRecordEnabled(true);

                setModel(model);
            } catch (IOException e) {
                lblStatus.setText(e.getMessage());

                model = getModel();
                model.setLblStatusText(e.getMessage());
                model.setBtnRecordEnabled(true);
                model.setBtnRecordText("Record Video");

                setModel(model);
            }
        } else {
            cx10.stopVideoRecorder();
            isRecording = false;

            model = getModel();
            model.setBtnRecordText("Record Video");

            setModel(model);
        }
    }
    private void onControlsClicked() {
        MainWindowModel model;
        if (!isControlled) {
            try {
                if (radioKeyboard.isSelected()) {
                    keyboard = new Keyboard(KeyboardFocusManager.getCurrentKeyboardFocusManager());
                    cx10.startControls(keyboard);
                } else if (radioController.isSelected()) {
                    cx10.startControls(new XInput());
                } else {
                    return;
                }
                isControlled = true;

                model = getModel();
                model.setBtnControlsText("Stop Controller");
                setModel(model);

            } catch (IOException e) {
                e.printStackTrace();
                model = getModel();
                model.setLblStatusText(e.getMessage());
                setModel(model);
            }

        } else {
            cx10.stopControls();
            isControlled = false;

            model = getModel();
            model.setBtnControlsText("Start Controller");
            setModel(model);
        }
    }

    private MainWindowModel getModel() {
        MainWindowModel model = new MainWindowModel();
        model.setBtnConnectEnabled(btnConnect.isEnabled());
        model.setBtnControlsEnabled(btnControls.isEnabled());
        model.setBtnVideoEnabled(btnVideo.isEnabled());
        model.setBtnRecordEnabled(btnRecord.isEnabled());

        model.setBtnConnectText(btnConnect.getText());
        model.setBtnControlsText(btnControls.getText());
        model.setBtnVideoText(btnVideo.getText());
        model.setBtnRecordText(btnRecord.getText());
        model.setLblStatusText(lblStatus.getText());
        return model;
    }

    private void setModel(final MainWindowModel model) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                btnConnect.setEnabled(model.isBtnConnectEnabled());
                btnConnect.setText(model.getBtnConnectText());

                btnControls.setEnabled(model.isBtnControlsEnabled());
                btnControls.setText(model.getBtnControlsText());

                btnVideo.setEnabled(model.isBtnVideoEnabled());
                btnVideo.setText(model.getBtnVideoText());

                btnRecord.setEnabled(model.isBtnRecordEnabled());
                btnRecord.setText(model.getBtnRecordText());

                lblStatus.setText(model.getLblStatusText());
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnControls;
    private javax.swing.JButton btnRecord;
    private javax.swing.JButton btnVideo;
    private javax.swing.ButtonGroup inputSelect;
    private javax.swing.JLabel lblStatus;
    private javax.swing.ButtonGroup platformSelect;
    private javax.swing.JRadioButton radioController;
    private javax.swing.JRadioButton radioKeyboard;
    private javax.swing.JRadioButton radioLinux;
    private javax.swing.JRadioButton radioWindows;
    // End of variables declaration//GEN-END:variables

}
